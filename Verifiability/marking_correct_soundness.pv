type id.
type skey.
type role.

free C: role.
free E: role.

free tmpC: channel.

free ch: channel [private].
free mix: channel [private].
free bb: channel.
free chan: channel.

table correct_ans(bitstring, bitstring, bitstring).

event correct (bitstring, bitstring, bitstring).
event ismc (bitstring, bitstring, bitstring).
query quest: bitstring, answ: bitstring, mark: bitstring; event(ismc(quest,answ,mark)) ==> event(correct(quest,answ,mark)).

fun pk(skey): id.
fun hash(bitstring): bitstring.

fun encrypt(id, bitstring): bitstring.
fun decrypt(skey, bitstring): bitstring
    reduc
        forall k: skey, m: bitstring; decrypt(k, encrypt(pk(k), m)) = m.

fun sign(skey, bitstring) : bitstring.

reduc forall k: skey, m: bitstring; getmess(sign(k, m)) = m.
fun checksign(id, bitstring) : bitstring
    reduc
        forall k: skey, m: bitstring; checksign(pk(k), sign(k, m)) = m.

(*-----------------Exam Authority-----------------*)
let EA (skEA: skey, idABCA: id, idQC: id) =

    new exam: id;
    out(bb, exam);
    (* Request questions *)
    out(ch, exam);
    in(ch, (Q:bitstring, =exam));
    let (qi: bitstring, sqi: bitstring) = Q in
    if (qi, exam) = checksign(idQC, sqi) then

    (* Examiner registration *)
    in(mix, (CrE: bitstring, pseudoE : id, =exam));
    let (credE: bitstring, scredE: bitstring) = CrE in
    if (credE, E) = checksign(idABCA, scredE) then
        out(mix, (exam, true));

    (* Candidate registration *)
    in(mix, (CrC: bitstring, pseudoC : id, =exam));
    let (credC: bitstring, scredC: bitstring) = CrC in
    if (credC, C) = checksign(idABCA, scredC) then
        out(mix, (exam, true));

    (* Create tests *)
    let eQ = encrypt(pseudoC, Q) in
    let test = (eQ, pseudoC, pseudoE) in
    let sTest = sign(skEA, test) in

    (* Testing *)
    out(mix, (test, sTest));
    in(mix, (S: bitstring, sS: bitstring, =pseudoC, =CrC, =exam));
    let (=credC, =scredC) = CrC in
    if (credC, C) = checksign(idABCA, scredC) then
    if S = checksign(pseudoC, sS) then
    let (=qi, si: bitstring) = S in
    new alpha: bitstring;
    let rC = hash((S, alpha)) in
    let srC = sign(skEA, rC) in
    out(mix, (rC, srC));

    (* Marking *)
    let sSEA = sign(skEA, (qi, si)) in
    out(bb, encrypt(pseudoE, (qi, si, sSEA, exam)));

    in(mix, (M: bitstring, sM: bitstring, =pseudoE, =CrE, =exam));
    let (=credE, =scredE) = CrE in
    if (credE, E) = checksign(idABCA, scredE) then 
    if M = checksign(pseudoE, sM) then
    out(mix, (M, sM, pseudoE, exam))
    .

(*-----------------Question Committee-----------------*)
let QC (skQC : skey, qi: bitstring) =
    in(ch, exam: id);
    let Q = (qi, sign(skQC, (qi, exam))) in
    out(ch, (Q, exam)).

(*-----------------Examiner-----------------*)
let Ex (pseudo_skE: skey, CrE: bitstring, idEA: id) =

    let pseudoE = pk(pseudo_skE) in
    (* Registration *)
    in(bb, exam: id);
    out(mix, (CrE, pseudoE, exam));

    in(mix, (=exam, isreg: bool));

    if isreg = true then

    (* Marking *)
    in(bb, cipher: bitstring);
    let (qi: bitstring, si: bitstring, sSEA: bitstring, =exam) = decrypt(pseudo_skE, cipher) in
    if (qi, si) = checksign(idEA, sSEA) then
    new mi: bitstring;
    let M = (qi, si, mi) in
    let sM = sign(pseudo_skE, M) in
    out(mix, (M, sM, pseudoE, CrE, exam))
    .

(*-----------------Candidate-----------------*)
let Cand (pseudo_skC: skey, CrC: bitstring, idEA: id, idQC: id, priv_ch: channel, ansC: bitstring) =

    let pseudoC = pk(pseudo_skC) in
    (* Registration *)
    in(bb, exam: id);
    out(mix, (CrC, pseudoC, exam));

    in(mix, (=exam, isreg: bool));

    if isreg = true then

    (* Testing *)
    in(mix, (test: bitstring, sTest: bitstring));
    if test = checksign(idEA, sTest) then
    let (eQ: bitstring, pseudoC2: id, pseudoE: id) = test in
    if pseudoC2 = pseudoC then
    let (qi: bitstring, sqi: bitstring) = decrypt(pseudo_skC, eQ) in
    if (qi, exam) = checksign(idQC, sqi) then

    (* Testing - Create answer *)
    let si = ansC in
    let S = (qi, si) in
    let sS = sign(pseudo_skC, S) in
    out(mix, (S, sS, pseudoC, CrC, exam));

    in(mix, (rC: bitstring, srC: bitstring));

    (* Marking *)
    in(mix, (M: bitstring, sM: bitstring, =pseudoE, =exam));
    if M = checksign(pseudoE, sM) then
    let (=qi, =si, mi: bitstring) = M in
    event correct(qi, si, mi);
    out(priv_ch, (qi, si, mi))
    .

let test (priv_ch: channel) =
    in(priv_ch, (ques: bitstring, ans: bitstring, mark: bitstring));
    get correct_ans(=ques,=ans,mark':bitstring) in
    if mark'=mark then
    event ismc(ques,ans,mark)
    else 0
    .

process

!(
    (*Write only channels for the attacker*)
     !in(tmpC, x:bitstring); out(mix, x);
     !in(tmpC, x:bitstring); out(ch, x);

    (*There is an Attribute-based Credential Authority*)
    new skABCA: skey; let idABCA = pk(skABCA) in out (chan, idABCA);

    (*We assume one Exam Authority and one Question Committee*)
    new skEA: skey; let idEA = pk(skEA) in out (chan, (skEA, idEA));
    new skQC: skey; let idQC = pk(skQC) in out (chan, idQC);

    new pch: channel;

    new ques:bitstring;  new ans_ok: bitstring; new mark_good: bitstring; insert correct_ans(ques,ans_ok,mark_good); 
    new ans_wrong: bitstring; new mark_bad: bitstring; insert correct_ans(ques,ans_wrong,mark_bad);
    out(chan, ans_ok);
    out(chan, ans_wrong);
    out(chan, mark_good);
    out(chan, mark_bad);

    (!( 
        EA(skEA, idABCA, idQC)
    )) |
    (!(
        QC(skQC, ques)
    ))  |
    (!(
        new pseudo_skE: skey;
        new credE: bitstring;
        let scredE = sign(skABCA, (credE, E)) in
        let CrE = (credE, scredE) in
        out(chan, (pseudo_skE, CrE));
        in(chan, ansC: bitstring)
    )) |
    (
        new pseudo_skC: skey;
        new credC: bitstring;
        let scredC = sign(skABCA, (credC, C)) in
        let CrC = (credC, scredC) in
        in(chan, ansC: bitstring);
        Cand(pseudo_skC, CrC, idEA, idQC, pch, ansC)
    ) |
    (!( 
        new pseudo_skC: skey;
        new credC: bitstring;
        let scredC = sign(skABCA, (credC, C)) in
        let CrC = (credC, scredC) in
        out(tmpC, (pseudo_skC, CrC));
        in(chan, ansC: bitstring)
    )) |
    (!(test(pch)))
)